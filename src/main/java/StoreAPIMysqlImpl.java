import com.mongodb.*;
import com.mongodb.client.AggregateIterable;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Accumulators;
import com.mongodb.client.model.Aggregates;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import org.bson.Document;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.Instant;
import java.util.*;

class StoreAPIMysqlImpl implements StoreAPI {
    // locks are required to make the application thread safe
    // order lock will ensure consistent stock in case multiple threads trying to submit order
    static Object orderLock = new Object();
    // review lock will ensure no two or more threads will comment for the same product by same user
    static Object reviewLock = new Object();
    static int totalProductsSubmitted = 0;
    static int totalMissedProducts = 0;

    /***
     * This method creates the account in the database.
     * @param username
     * @param password
     * @param firstName
     * @param lastName
     */
    @Override
    public void createAccount(String username, String password, String firstName, String lastName) {
        MongoClient client = null;
        try {
            client = getConnectionClient();
            MongoDatabase dbConnection = client.getDatabase("cart");
            MongoCollection<Document> collection = dbConnection.getCollection("users");
            Document userInsertDocument = new Document("username", username)
                    .append("password", password)
                    .append("first_name", firstName)
                    .append("last_name", lastName);
            collection.insertOne(userInsertDocument);
            System.out.println("User with name " + firstName + " " + lastName + " inserted successfully");
        } catch (MongoWriteException mongoWriteException) {
            System.out.println("User already exists, cannot add new user");
        } finally {
            client.close();
        }
    }

    /***
     * This method is used to submit the order to the database. Order id will be generated by using unix epoch timestamp
     * and adding random numbers.
     * @param orderDate: Date at which order is submitted
     * @param username: Username
     * @param password: Password
     * @param listOfProductsAndQuantities: List of products required in this order
     */
    @Override
    public void submitOrder(String orderDate, String username, String password, HashMap<Long, Integer> listOfProductsAndQuantities) {
        synchronized (orderLock) {
            if (authorized(username, password)) {
                // retrieve current available stock. There blank hashmap returned if stock is not enough for the order
                HashMap<Long, Integer> availableStock = isEnoughStock(listOfProductsAndQuantities);
                if (availableStock.size() > 0) {
                    // make document for list of products to be added to the orders collection
                    Document doc = new Document("user", username);
                    ArrayList<Document> productstoAdd = new ArrayList<>();
                    for (Map.Entry<Long, Integer> entry : listOfProductsAndQuantities.entrySet()) {
                        long product_id = entry.getKey();
                        int qty = entry.getValue();
                        Document docProductToAdd = new Document("product_id", product_id)
                                .append("qty", qty);
                        productstoAdd.add(docProductToAdd);
                    }
                    doc.append("products", productstoAdd);
                    MongoClient client = null;
                    try {
                        client = getConnectionClient();
                        MongoDatabase dbConnection = client.getDatabase("cart");
                        MongoCollection<Document> collection = dbConnection.getCollection("orders");
                        MongoCollection<Document> collectionProducts = dbConnection.getCollection("products");
                        // insert document containing order information to the orders
                        collection.insertOne(doc);
                        // update the inventory i.e products collection with updated stock value
                        for (Map.Entry<Long, Integer> entry : listOfProductsAndQuantities.entrySet()) {
                            long product_id = entry.getKey();
                            int currentAvailableStock = availableStock.get(product_id);
                            int remainingProductStock = currentAvailableStock - entry.getValue();
                            collectionProducts.updateOne(Filters.eq("product_id", product_id), Updates.set("Stock", remainingProductStock));
                        }
                        System.out.println("A new order has been created for user " + username);
                    } catch (MongoWriteException mongoWriteException) {
                        System.out.println("Unable to submit order, please check the data and try again");
                    } finally {
                        client.close();
                    }
                } else {
                    System.out.println("Cannot place order, not enough stock available for this order");
                }
            } else {
                System.out.println("Username and password is incorrect, cannot place the order");
            }
        }
    }

    /***
     * This function is used to post the review on a product
     * @param reviewId review id. If passed -1, a new unique id will be generated
     * @param username username
     * @param password password
     * @param product_id product id for which review is to be posted
     * @param rating rating
     * @param reviewText review text
     * @param date date at which review was posted
     */
    @Override
    public void postReview(long reviewId, String username, String password, Long product_id, int rating, String reviewText, String date) {
        synchronized (reviewLock) {
            if (authorized(username, password)) {
                // check if user has already posted review for the product
                if (!checkReviewExists(reviewId, username)) {
                    MongoClient client = null;
                    try {
                        if (reviewId < 0) {
                            reviewId = Instant.now().getEpochSecond();
                        }
                        client = getConnectionClient();
                        MongoDatabase dbConnection = client.getDatabase("cart");
                        MongoCollection<Document> collection = dbConnection.getCollection("reviews");
                        Document postReview = new Document("review_id", reviewId)
                                .append("product_id", product_id)
                                .append("reviewText", reviewText)
                                .append("rating", rating)
                                .append("user", username)
                                .append("date", date);
                        collection.insertOne(postReview);
                        System.out.println("Review for Product with id " + product_id + " has been posted for the User: " + username);
                    } catch (MongoWriteException mongoWriteException) {
                        System.out.println("Unable to post review, review id already exists.");
                    } finally {
                        client.close();
                    }
                } else {
                    System.out.println("User " + username + " has already posted review for product with id " + product_id + " cannot add more review");
                }
            } else {
                System.out.println("Wrong credentials provided, cannot submit review");
            }
        }
    }

    /***
     * Check if user is authorized
     * @param username
     * @param password
     * @return true if username and password matches else false
     */
    @Override
    public boolean authorized(String username, String password) {
        MongoClient client = null;
        try {
            client = getConnectionClient();
            MongoDatabase dbConnection = client.getDatabase("cart");
            MongoCollection<Document> collection = dbConnection.getCollection("users");
            Document userCheck = new Document("username", username)
                    .append("password", password);
            FindIterable<Document> iterDoc = collection.find(userCheck);
            Iterator it = iterDoc.iterator();
            return it.hasNext();
        } catch (MongoSocketReadException mongoSocketReadException) {
            System.out.println("Unable to read from database, check connection or try again");
        } finally {
            client.close();
        }
        return false;
    }

    /***
     * This method is used to add the product to the database
     * @param product_id product id. If passed -1, a new unique id will be generated
     * @param name: Name of the product
     * @param description: Product description
     * @param price: Price of the product
     * @param initialStock: Initial Stock of the Product to be added
     */
    @Override
    public void addProduct(long product_id, String name, String description, float price, int initialStock) {
        MongoClient client = null;
        try {
            if (product_id < 0) {
                product_id = Instant.now().getEpochSecond();
            }
            client = getConnectionClient();
            MongoDatabase dbConnection = client.getDatabase("cart");
            MongoCollection<Document> collection = dbConnection.getCollection("products");
            Document productInsertDocument = new Document("product_id", product_id)
                    .append("name", name)
                    .append("description", description)
                    .append("price", price)
                    .append("Stock", initialStock);
            collection.insertOne(productInsertDocument);
            System.out.println("Product with id" + product_id + " is inserted successfully");
        } catch (MongoWriteException mongoWriteException) {
            System.out.println("Product already exists, cannot add product");
        } finally {
            client.close();
        }
    }

    /***
     * This method is used to update the stock of a given product
     * @param product_id
     * @param itemCountToAdd
     */
    @Override
    public void updateStockLevel(int product_id, int itemCountToAdd) {
        MongoClient client = null;
        try {
            client = getConnectionClient();
            MongoDatabase dbConnection = client.getDatabase("cart");
            MongoCollection<Document> collection = dbConnection.getCollection("products");
            //get the product which needs to be updated
            Document productCheck = new Document("product_id", product_id);
            FindIterable<Document> iterDoc = collection.find(productCheck);
            Iterator it = iterDoc.iterator();
            if (it.hasNext()) {
                //Add the items to be added to current stock count and update the collection
                Document productData = (Document) it.next();
                int currentStock = ((Number) productData.get("Stock")).intValue();
                collection.updateOne(Filters.eq("product_id", product_id), Updates.set("Stock", (currentStock + itemCountToAdd)));
                System.out.println("Stock for product_id " + product_id + " is updated.");
            } else {
                System.out.println("Cannot update stock, product not found. Please check the product ID: " + product_id);
            }
        } catch (MongoSocketReadException mongoSocketReadException) {
            System.out.println("Unable to read from database, check connection or try again");
        } finally {
            client.close();
        }
    }

    /***
     * This method is used to get the reviews of a given product
     * @param product_id
     */
    @Override
    public void getProductAndReviews(int product_id) {
        MongoClient client = null;
        try {
            client = getConnectionClient();
            MongoDatabase dbConnection = client.getDatabase("cart");
            MongoCollection<Document> collection = dbConnection.getCollection("reviews");
            //first get the product information
            MongoCollection<Document> productInfoCollection = dbConnection.getCollection("products");
            AggregateIterable<Document> productInfo = productInfoCollection.aggregate(
                    Arrays.asList(
                            Aggregates.match(Filters.eq("product_id", product_id))
                    )
            );
            Iterator productsIter = productInfo.iterator();
            if (productsIter.hasNext()) {
                Document productData = (Document) productsIter.next();
                AggregateIterable<Document> avgRating = collection.aggregate(
                        Arrays.asList(
                                Aggregates.match(Filters.eq("product_id", product_id))
                        )
                );
                // extract all the reviews for the given product and print the output
                Iterator it = avgRating.iterator();
                if (it.hasNext()) {
                    System.out.println("****************************************************************************");
                    System.out.println("Reviews for product: " + productData.getString("name"));
                    System.out.println("Product description: " + productData.getString("description"));
                    System.out.println("Price " + productData.get("price").toString());
                    System.out.println("****************************************************************************");
                    int itemCount = 1;
                    while (it.hasNext()) {
                        System.out.println("Review no: " + itemCount);
                        Document data = (Document) it.next();
                        System.out.println("Rating:" + ((Number) data.get("rating")).intValue());
                        System.out.println("Review Text:" + data.get("reviewText").toString());
                        System.out.println("User: " + data.get("user").toString());
                        System.out.println("Date: " + data.get("date").toString());
                        System.out.println("***");
                        itemCount++;
                    }
                } else {
                    System.out.println("No reviews has been posted yet for product with id " + product_id);
                }
            } else {
                System.out.println("Product with id " + product_id + " does not exists");
            }

        } catch (MongoSocketReadException mongoSocketReadException) {
            System.out.println("Unable to read from database, check connection or try again");
        } catch (MongoCommandException mongoCommandException) {
            System.out.println("There was an error in the executing mongo command, please check your inputs");
        } finally {
            client.close();
        }
    }

    /***
     * This method is to print the average user rating
     * @param username
     */
    @Override
    public void getAverageUserRating(String username) {
        MongoClient client = null;
        try {
            client = getConnectionClient();
            MongoDatabase dbConnection = client.getDatabase("cart");
            MongoCollection<Document> collection = dbConnection.getCollection("reviews");

            AggregateIterable<Document> avgRating = collection.aggregate(
                    Arrays.asList(
                            Aggregates.match(Filters.eq("user", username)),
                            Aggregates.group("avg_rating", Accumulators.avg("avg_rating", "$rating"))
                    )
            );
            Iterator it = avgRating.iterator();
            if (it.hasNext()) {
                Document data = (Document) it.next();
                float avg_rating = ((Number) data.get("avg_rating")).floatValue();
                System.out.println("Avg rating by user " + username + " is " + avg_rating);
            } else {
                System.out.println("No reviews has been posted yet by " + username);
            }
        } catch (MongoSocketReadException mongoSocketReadException) {
            System.out.println("Unable to read from database, check connection or try again");
        } catch (MongoCommandException mongoCommandException) {
            System.out.println("There was an error in the executing mongo command, please check your inputs");
        } finally {
            client.close();
        }
    }

    @Override
    public int[] getMissedProducts() {
        return new int[]{totalMissedProducts, totalProductsSubmitted};
    }

    /**
     * This method is used to check if ordered products are present in the inventory or not
     *
     * @param listOfProductsAndQuantities hashmap, where key is product id and value is qty required in order
     * @return: Hashmap of current available stock else blank hashmap
     */
    public HashMap<Long, Integer> isEnoughStock(HashMap<Long, Integer> listOfProductsAndQuantities) {
        HashMap<Long, Integer> availableStock = new HashMap<>();
        if (listOfProductsAndQuantities.size() == 0) {
            return availableStock;
        }
        MongoClient client = null;
        try {
            client = getConnectionClient();
            MongoDatabase dbConnection = client.getDatabase("cart");
            MongoCollection<Document> collection = dbConnection.getCollection("products");
            // get current stock of the product
            AggregateIterable<Document> productDataIter = collection.aggregate(
                    Arrays.asList(
                            Aggregates.match(Filters.in("product_id", listOfProductsAndQuantities.keySet()))));

            Iterator it = productDataIter.iterator();
            int missedProducts = 0;
            int totalProducts = 0;
            while (it.hasNext()) {
                Document prodData = (Document) it.next();
                long dbProductId = ((Number) prodData.get("product_id")).longValue();
                int dbStockAvailable = ((Number) prodData.get("Stock")).intValue();
                totalProducts += listOfProductsAndQuantities.get(dbProductId);
                if (listOfProductsAndQuantities.get(dbProductId) > dbStockAvailable) {
                    missedProducts += listOfProductsAndQuantities.get(dbProductId) - dbStockAvailable;
                } else {
                    availableStock.put(dbProductId, dbStockAvailable);
                }
            }
            totalProductsSubmitted += totalProducts;
            if (missedProducts > 0) {
                totalMissedProducts += missedProducts;
                return new HashMap<>();
            } else {
                return availableStock;
            }
        } catch (MongoSocketReadException mongoSocketReadException) {
            System.out.println("Unable to read from database, check connection or try again");
            return new HashMap<>();
        } finally {
            client.close();
        }
    }

    /***
     *  This method will check if the review is already posted for the product by the user
     * @param reviewId
     * @param username
     * @return true if review is already posted by the user for the product else false
     */
    public boolean checkReviewExists(long reviewId, String username) {
        MongoClient client = null;
        try {
            client = getConnectionClient();
            MongoDatabase dbConnection = client.getDatabase("cart");
            MongoCollection<Document> collection = dbConnection.getCollection("reviews");
            Document userCheck = new Document("review_id", reviewId)
                    .append("user", username);
            FindIterable<Document> iterDoc = collection.find(userCheck);
            Iterator it = iterDoc.iterator();
            return it.hasNext();
        } catch (MongoSocketReadException mongoSocketReadException) {
            System.out.println("Unable to read from database, check connection or try again");
            return false;
        } finally {
            client.close();
        }
    }

    public MongoClient getConnectionClient() {
        Properties dbConnectionProp = new Properties();
        FileInputStream dbPropFile = null;
        MongoClient mongo = null;
        try {
            dbPropFile = new FileInputStream("properties/db.properties");
            dbConnectionProp.load(dbPropFile);
            dbPropFile.close();
            mongo = new MongoClient(dbConnectionProp.getProperty("host"), Integer.parseInt(dbConnectionProp.getProperty("port")));
            // Creating Credentials
            MongoCredential credential;
            credential = MongoCredential.createCredential(dbConnectionProp.getProperty("username"), "cart",
                    dbConnectionProp.getProperty("password").toCharArray());

        } catch (FileNotFoundException e) {
            System.out.println("Database connection config file not found");
        } catch (IOException ie) {
            System.out.println("There was I/O error while reading db config file, please check the config file and try again");
        } catch (NumberFormatException e) {
            System.out.println("There was an error in getting the port no for the db. Please check config file");
        }
        return mongo;
    }
}
